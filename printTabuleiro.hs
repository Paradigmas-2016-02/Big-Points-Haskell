type Peao = (Char, Int) -- (Cor, Posicao)
type Disco = (Int, Int) -- (Cor, Posicao)
type Escada = Int       -- (Podium)
type Tabuleiro = (Peao, Disco, Escada)

tabuleiro :: [Tabuleiro]
tabuleiro = [(('R', 1), (0, 0), 0),
    (('G', 2), (0, 0), 0),
    (('B', 3), (0, 0), 0),
    (('P', 4), (0, 0), 0),
    (('Y', 5), (0, 0), 0),
    ((' ', 0), (1, 6), 0),
    ((' ', 0), (1, 7), 0),
    ((' ', 0), (4, 8), 0),
    ((' ', 0), (5, 9), 0),
    ((' ', 0), (3, 10), 0),
    ((' ', 0), (2, 11), 0),
    ((' ', 0), (1, 12), 0),
    ((' ', 0), (4, 13), 0),
    ((' ', 0), (4, 14), 0),
    ((' ', 0), (2, 15), 0),
    ((' ', 0), (3, 16), 0),
    ((' ', 0), (5, 17), 0),
    ((' ', 0), (4, 18), 0),
    ((' ', 0), (1, 19), 0),
    ((' ', 0), (1, 20), 0),
    ((' ', 0), (5, 21), 0),
    ((' ', 0), (4, 22), 0),
    ((' ', 0), (1, 23), 0),
    ((' ', 0), (2, 24), 0),
    ((' ', 0), (1, 25), 0),
    ((' ', 0), (4, 26), 0),
    ((' ', 0), (4, 27), 0),
    ((' ', 0), (3, 28), 0),
    ((' ', 0), (3, 29), 0),
    ((' ', 0), (5, 30), 0),
    ((' ', 0), (1, 31), 0),
    ((' ', 0), (4, 32), 0),
    ((' ', 0), (2, 33), 0),
    ((' ', 0), (4, 34), 0),
    ((' ', 0), (2, 35), 0),
    ((' ', 0), (3, 36), 0),
    ((' ', 0), (2, 37), 0),
    ((' ', 0), (1, 38), 0),
    ((' ', 0), (5, 39), 0),
    ((' ', 0), (1, 40), 0),
    ((' ', 0), (5, 41), 0),
    ((' ', 0), (2, 42), 0),
    ((' ', 0), (4, 43), 0),
    ((' ', 0), (3, 44), 0),
    ((' ', 0), (1, 45), 0),
    ((' ', 0), (2, 46), 0),
    ((' ', 0), (3, 47), 0),
    ((' ', 0), (2, 48), 0),
    ((' ', 0), (4, 49), 0),
    ((' ', 0), (5, 50), 0),
    ((' ', 0), (0, 0), 1),
    ((' ', 0), (0, 0), 2),
    ((' ', 0), (0, 0), 3),
    ((' ', 0), (0, 0), 4),
    ((' ', 0), (0, 0), 5)]

printElements :: [Tabuleiro] -> IO()
printElements [] = return ()
printElements (x:xs) = do print filtro x 
                          printElements xs

filtro :: Tabuleiro -> String
filtro () = return ()
filtro (a, b, c) = | condicaoUm a
                   | condicaoDois b
                   | otherwise c

condicaoUm :: (h, i) -> String
condicaoUm = | 

condicaoDois :: (j, k) -> String

--    | ((' ', 0), (0, 0), 0) <- x 
--    | ((_, a!0), (_, _), _) <- x
--  b | ((_, _), (b!0, _), _) <- x